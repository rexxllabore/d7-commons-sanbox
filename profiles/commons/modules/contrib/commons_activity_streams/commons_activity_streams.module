<?php

include_once 'commons_activity_streams.features.inc';

/**
 * Implements hook_form_alter().
 */
function commons_activity_streams_form_alter(&$form, &$form_state, $form_id) {
  // Customize the text on the filter for Activity landing page.
  if ($form_id == 'views_exposed_form' && $form['#id'] == 'views-exposed-form-commons-activity-streams-activity-panel-pane-3') {
    $form['following']['#options'][0] = t("activity I'm not following");
    $form['following']['#options'][1] = t("activity I'm following");
  }
}

/**
 * Implements hook_node_insert().
 */
function commons_activity_streams_node_insert($node) {
  // Create a message when a user creates a new node.
  $account = user_load($node->uid);
  // Allow other modules to change the message type used for this event.
  $hook = 'node_insert';
  $message_type = 'commons_activity_streams_node_created';
  drupal_alter('commons_activity_streams_message_selection', $message_type, $hook, $node);
  $message = message_create($message_type, array('uid' => $account->uid, 'timestamp' => $node->created));
  // Save reference to the node in the node reference field, and the
  $wrapper = entity_metadata_wrapper('message', $message);
  // We use a multiple value field in case we wish to use the same
  // field for grouping messages in the future
  // (eg http://drupal.org/node/1757060).
  $wrapper->field_target_nodes[] = $node;
  $wrapper->save();
}

/**
 * Implements hook_comment_insert().
 */
function commons_activity_streams_comment_insert($comment) {
  $account = user_load($comment->uid);
  $node = node_load($comment->nid);

  $message = message_create('commons_activity_streams_comment_created', array('uid' => $account->uid, 'timestamp' => $comment->created));
  // Save reference to the node in the node reference field, and the
  // "publish" state (i.e. if the node is published or unpublished).
  $wrapper = entity_metadata_wrapper('message', $message);
  $wrapper->field_target_nodes[] = $node;
  $wrapper->field_target_comments[] = $comment;

  // The message should be published only if the node and the comment are
  // both published.
  // @todo: Deal with message publishing/unpublishing.
  /*
  $published = $node->status && $comment->status;
  $wrapper->field_published->set($published);
  */
  $wrapper->save();
}

/**
 * Implements hook_comment_delete().
 */
function commons_activity_streams_comment_delete($comment) {
  // Delete the activity stream message created when this comment
  // was posted.
  if ($mids = commons_activity_streams_existing_messages($comment->uid, array($comment->cid), 'field_target_comments', 'commons_activity_streams_comment_created')) {
    message_delete_multiple($mids);
  }
}


/**
* Find existing messages that match certain parameters.
*/
function commons_activity_streams_existing_messages($acting_uid, $target_ids, $target_field, $message_type) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'message', '=')
   ->propertyCondition('uid', $acting_uid)
   ->propertyCondition('type', $message_type, '=')
   ->fieldCondition($target_field, 'target_id', $target_ids, 'IN')
   ->execute();

  if (!empty($query->ordered_results)) {
    $mids = array();
    foreach($query->ordered_results as $result) {
      $mids[] = $result->entity_id;
    }
    return $mids;
  }
  return FALSE;
}


/**
* Implements hook_commons_notify_message_type_mapping_alter().
*/
function commons_activity_streams_commons_notify_message_type_mapping_alter(&$mapping) {
  $cas_mapping = array(
    'commons_activity_streams_comment_created' => 'commons_notify_comment_created',
  );
  $mapping = array_merge($mapping, $cas_mapping);
}