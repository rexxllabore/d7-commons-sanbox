<?php
/**
 * @file
 * Code for the Commons Q&A feature.
 */

include_once 'commons_q_a.features.inc';

/**
* Implements hook_commons_bw_group_widget().
*/
function commons_q_a_commons_bw_group_widget() {
  return array(
    'commons_q_a' => array(
      'title' => 'Q & A',
      'type' => 'view',
      'vid' => 'commons_bw_q_a',
      'display' => 'default',
      'weight' => 5,
    ),
  );
}

/**
 * Implements hook_views_default_views_alter().
 */
function commons_q_a_views_default_views_alter(&$views) {
  if (isset($views['commons_bw_all'])) {
    // Answers aren't meant to display on the group browswing widget because
    // they appear on question landing pages.
    $views['commons_bw_all']->display['default']->display_options['filters']['type']['id'] = 'type';
    $views['commons_bw_all']->display['default']->display_options['filters']['type']['table'] = 'node';
    $views['commons_bw_all']->display['default']->display_options['filters']['type']['field'] = 'type';
    $views['commons_bw_all']->display['default']->display_options['filters']['type']['operator'] = 'not in';
    if (!isset($views['commons_bw_all']->display['default']->display_options['filters']['type']['value'])) {
      $views['commons_bw_all']->display['default']->display_options['filters']['type']['value'] = array('answer' => 'answer');
    }
    else {
      $views['commons_bw_all']->display['default']->display_options['filters']['type']['value']['answer'] = 'answer';
    }
  }
}

/**
* Implements hook_views_pre_render().
*/
function commons_q_a_views_pre_render(&$view) {
  if ($view->name == 'commons_bw_q_a') {
    $group_id = $view->args[0];
    if (og_user_access('node', $group_id, 'create question content')) {
      $view->attachment_before = l(t('Ask a question'), 'node/add/question', array('query' => array('og_group_ref' => $group_id)));
    }
  }
  if ($view->name == 'commons_question_answers' && !empty($view->args[0])) {
    // If the user has access to post into any of the groups associated
    // with the question, embed a simplified answer node form.
    $question_nid = $view->args[0];
    $question = node_load($question_nid);
    foreach ($question->og_group_ref[LANGUAGE_NONE] as $key => $value) {
      if (og_user_access('node', $value['target_id'], 'create answer content')) {
        module_load_include('inc', 'node', 'node.pages');
        global $user;
        $types = node_type_get_types();
        $node = (object) array('uid' => $user->uid, 'name' => (isset($user->name) ? $user->name : ''), 'type' => 'answer', 'language' => LANGUAGE_NONE);
        // Prepopulate the Related question field
        // with Entityreference Prepopulate, which looks strictly at $_GET.
        $_GET['field_related_question'] = $view->args[0];
        $answer_form = drupal_get_form('answer_node_form', $node);
        $answer_form['header'] = array(
          '#markup' => '<h3>' . t('Add a new answer') . '</h3>',
          '#weight' => -10,
        );
        // Hide any vertical tabs that might be present.
        $answer_form['additional_settings']['#access'] = FALSE;
        // Hide the Related question field.
        $answer_form['field_related_question']['#access'] = FALSE;
        // Add the form to the attachment_after part of the view,
        $view->attachment_after .= drupal_render($answer_form);
        // We only need to add the form once if the user has access to
        // post questions into any of the groups associated with the parent.
        return;
      }
    }
  }
}

/**
* Implements hook_form_alter().
*/
function commons_q_a_form_alter(&$form, &$form_state, $form_id) {
  // Unset the groups audience field. Answers programatically inherit
  // the group membership of their respective questions.
  if ($form_id == 'answer_node_form') {
    $form['og_group_ref']['#access'] = FALSE;
  }
  if ($form_id == 'question_node_form' && empty($form['node']->nid)) {
    drupal_set_title(t('Ask a question'));
  }
}

/**
 * Implements hook_field_attach_submit().
 */
function commons_q_a_field_attach_submit($entity_type, &$entity, $form, &$form_state) {
  // Questions should inherit the group membership of the related question.
  if ($entity_type == 'node' && $entity->type == 'answer' && empty($entity->nid)) {
    $question = node_load($entity->field_related_question[LANGUAGE_NONE][0]['target_id']);
    $entity->og_group_ref[LANGUAGE_NONE] = $question->og_group_ref[LANGUAGE_NONE];
  }
}

/**
 * Implements hook_commons_bw_create_all_widget().
 */
function commons_q_a_commons_bw_create_all_widget($group) {
   if (og_user_access('node', $group->nid, 'create question content')) {
      $link = l('Ask a question','node/add/question',
      array('attributes' => array('class' => 'commons-q-a-create'), 'query' => array('og_group_ref' => $group->nid))
    );
    return array(
      'commons_q_a' => array(
        'link' => $link,
        'text' => t('Learn the best answer'),
        '#weight' => 5,
      ),
    );
  }
}

/**
 * Implements hook_commons_entity_integration.
 */
function commons_q_a_commons_entity_integration() {
  return array(
    'node' => array(
      'question' => array(
      ),
      'answer' => array(
      ),
    ),
  );
}

function commons_q_a_commons_activity_streams_message_selection_alter(&$message_type, $hook, $node) {
    if ($hook == 'node_insert' && $node->type == 'question') {
    $message_type = 'commons_q_a_question_asked';
  }
}


/**
 * Implements hook_rate_templates().
 */
function commons_q_a_rate_templates() {
  $templates = array();

  $templates['commons_thumbs_up_down'] = new stdClass();
  $templates['commons_thumbs_up_down']->value_type = 'points';
  $templates['commons_thumbs_up_down']->options = array(
    array(1, 'up'),
    array(-1, 'down'),
  );
  $templates['commons_thumbs_up_down']->theme = 'commons_template_commons_thumbs_up_down';
  $templates['commons_thumbs_up_down']->css = drupal_get_path('module', 'commons_q_a') . '/templates/commons_thumbs_up_down/commons-thumbs-up-down.css';
  $templates['commons_thumbs_up_down']->customizable = FALSE;
  $templates['commons_thumbs_up_down']->translate = TRUE;
  $templates['commons_thumbs_up_down']->template_title = t('Commons Thumbs up / down');

  return $templates;
}

/**
 * Implements hook_strongarm_alter().
 */
 function commons_q_a_strongarm_alter(&$items) {
  // Add Rate module widget configuration used for thumbs up/down
  // rating of answers.
  if (!empty($items['rate_widgets']->value)) {
    $items['rate_widgets']->value[] = commons_q_a_rate_widget();
  }
}


/**
 * Return a Rate module widget configuration used for thumbs up/down
 * rating of answers.
 */
function commons_q_a_rate_widget() {
  return (object) array(
    'name' => 'commons_answer',
    'tag' => 'commons_thumbs_up_down',
    'title' => 'Answer',
    'node_types' => array(
      0 => 'answer',
    ),
    'comment_types' => array(),
    'options' => array(
      0 => array(
        0 => 1,
        1 => 'up',
      ),
      1 => array(
        0 => -1,
        1 => 'down',
      ),
    ),
    'template' => 'commons_thumbs_up_down',
    'node_display' => '2',
    'teaser_display' => FALSE,
    'comment_display' => '2',
    'node_display_mode' => '1',
    'teaser_display_mode' => '1',
    'comment_display_mode' => '1',
    'roles' => array(
      2 => '2',
      1 => 0,
    ),
    'allow_voting_by_author' => 1,
    'noperm_behaviour' => '1',
    'displayed' => '1',
    'displayed_just_voted' => '2',
    'description' => '',
    'description_in_compact' => TRUE,
    'delete_vote_on_second_click' => '1',
    'value_type' => 'points',
    'theme' => 'commons_template_commons_thumbs_up_down',
    'css' => 'profiles/commons/modules/contrib/commons_q_a/templates/commons_thumbs_up_down/commons-thumbs-up-down.css',
    'translate' => TRUE,
  );
}
